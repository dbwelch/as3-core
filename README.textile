h1. Actionscript 3 Libraries

These are the Actionscript 3 libraries by Freeform Systems, this source tree uses "maven":http://maven.apache.org for the build process.

h2. Maven Builds

If you are using "maven":http://maven.apache.org and "flexmojos":http://flexmojos.sonatype.org/ for your project this is some information on repository configuration and declaring the dependencies.

You need to configure your maven settings to point to our public repository so that the dependencies can be resolved. An example maven settings file is available in the "mvn-settings repository":https://github.com/freeformsystems/mvn-settings.

You can then simply declare a dependency in your POM on any of the artifacts in this repository. For example:

bc. <dependency>
	<groupId>com.ffsys.flashx</groupId>
	<artifactId>core</artifactId>
	<version>0.1-SNAPSHOT</version>
	<type>swc</type>
</dependency>

h2. Library Overview

A brief list of some of the libraries available in this repository, this information is not considered normative but is a brief guide
to the source tree.

h3. Jump

A lightweight bridge for executing javascript from actionscript.

Supports accessing javascript variable values, setting existing (and defining new) javascript variables, invoking top-level function definitions and invoking functions on a nested object graph.

The API is exposed via the top-level _js_ object and all execution is performed by appending a call to the _valueOf()_ method.

Note that only references to simple types are possible, so attempting to access a complex object will fail, for example the following is invalid:

bc. import org.ecma.js;
var o:Object = js.document.getElementById( "wrapper" ).valueOf();

As the return value will be _null_.

h4. Accessing variables

An example of retrieving a pre-defined variable:

bc. import org.ecma.js;
trace("document.location.href: ", js.document.location.href.valueOf() );

h4. Invoke a nested function definition

Given the javascript:

bc. var o = {
	point: function( x, y )
	{
		return "function declared on object " + x + " || " + y;
	}
}

The _point_ method could be invoked from actionscript with:

bc. import org.ecma.js;
var result:String = js.o.point( 10, 10 ).valueOf();

h4. Allocate variables

bc. import org.ecma.js;
//assign a new non-existent variable and retrieve the value
js.integer = 10;
var integer:int = js.integer.valueOf();

h2. License

All source code is distributed with a "Creative Commons attribution and share-alike license":http://creativecommons.org/licenses/by-sa/2.0/uk/.