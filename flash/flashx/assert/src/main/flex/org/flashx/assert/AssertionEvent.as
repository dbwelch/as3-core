package org.flashx.assert {
	
	import flash.events.Event;
	import flash.events.IEventDispatcher;
	
	import org.flashx.events.Notifier;
	
	/**
	*	Events generated by the <code>Assertion</code> package.
	*
	*	@langversion ActionScript 3.0
	*	@playerversion Flash 9.0
	*
	*	@author Mischa Williamson
	*	@since  06.12.2007
	*/
	public class AssertionEvent extends Event {
		
		/**
		*	Event dispatched when an assertion passes.	
		*/
		static public const ASSERTION_PASS:String =
			"assertionPass";
			
		/**
		*	Event dispatched when an assertion fails.
		*/
		static public const ASSERTION_FAIL:String =
			"assertionFail";

		private var _element:IAssertionElement;
		
		/**
		*	Creates an <code>AssertionEvent</code> instance.
		*	
		*	@param type The <code>type</code> of the event.
		*	@param element The <code>IAssertionElement</code>
		*	that triggered this event.
		*/
		public function AssertionEvent(
			type:String,
			element:IAssertionElement = null )
		{
			super( type );
			_element = element;
		}
		
		/**
		*	The <code>IAssertionElement</code> that
		*	triggered this event.
		*/
		public function get element():IAssertionElement
		{
			return _element;
		}
		
		/**
		*	Creates a clone of this event.
		*	
		*	@return The cloned <code>Event</code>
		*	instance.
		*/
		override public function clone():Event
		{
			return new AssertionEvent( type, element );
		}
		
		/**
		*	Dispatches the <code>ASSERTION_PASS</code> event
		*	in the scope of a target <code>IEventDispatcher</code>.
		*	
		*	@param target The <code>IEventDispatcher</code>
		*	the event should be dispatched from.
		* 	@param element The assertion element that performed the assertion.
		*	
		*	@return The dispatched <code>Event</code>.
		*/
		static public function dispatchAssertionPass(
			target:IEventDispatcher,
			element:IAssertionElement = null ):Event
		{
			var event:AssertionEvent =
				new AssertionEvent( ASSERTION_PASS, element );
			Notifier.dispatchEvent( event as Event, target );
			return event;
		}
		
		/**
		*	Dispatches the <code>ASSERTION_FAIL</code> event
		*	in the scope of a target <code>IEventDispatcher</code>.
		*	
		*	@param target The <code>IEventDispatcher</code>
		*	the event should be dispatched from.
		* 	@param element The assertion element that performed the assertion.
		*	
		*	@return The dispatched <code>Event</code>.
		*/		
		static public function dispatchAssertionFail(
			target:IEventDispatcher,
			element:IAssertionElement = null ):Event
		{
			var event:AssertionEvent =
				new AssertionEvent( ASSERTION_FAIL, element );
			Notifier.dispatchEvent( event as Event, target );
			return event;
		}
	}
}